LogReg_Validation <- function(predicted, target){
  # Calculating the metrics for validating the Logistic Regression
  
  # Invoking the required libraries
  install.packages("ROCR")
  install.packages("verification")
  install.packages("AUC")
  install.packages("ResourceSelection")
  install.packages("dtw")
  install.packages("proxy")
  install.packages("seewave")
  
  library(ROCR)
  library(verification)
  library(AUC)
  library(ResourceSelection)
  library(proxy)
  library(dtw)
  library(seewave)
  # ===========================================================================
  # Defining the variables that needs to be used
    score <- predicted
    goodbad <- as.factor(target)
    
  
  # 1. Plotting the ROC Curve
  pred <- prediction(score, goodbad)
  perf <- performance(pred, "tpr", "fpr")
  plot(perf, colorize = TRUE)
  
  # Finding the performance measures for ROC Curve
  # a. AUC for the ROC Curve
  auc.tmp <- performance(pred,"auc")
  print("AUC for the Model");auc <- as.numeric(auc.tmp@y.values); auc
  
  # b. Gini Coefficient
  print("Gini Coefficient"); 2*auc - 1;
  
  # c. Accuracy
  acc.tmp <- performance(pred,"acc")
  cutoff.list.acc <- unlist(acc.tmp@x.values[[1]])
  print("Accuracy of the model:");acc.rocr<-max(acc.tmp@y.values[[1]])
  print("Optimal Cutoff point for Accuracy"); cutoff.list.acc[which.max(acc.tmp@y.values[[1]])]
  
  # d. Error Rate
  err.tmp <- performance(pred, "err")
  print("Error rate for the model:"); max(err.tmp@y.values[[1]])
  
  # e. Precision v/s Recall Curve
  prec.tmp <- performance(pred, "prec", "rec")
  plot(prec.tmp, colorize = TRUE)
  
  # f. Sensitivity
  print("Sensitivity for the model:");auc(sensitivity(data$score, data$goodbad))
  # g. Specificity
  print("Specificity for the model:");auc(specificity(data$score, data$goodbad))
  
  # h. Lift charts
  lift <- performance(pred, "lift", "rpp")
  plot(lift, colorize = TRUE)
  
  # i. Kendall's Tau-b
  x <- as.numeric(goodbad)
  y <- as.numeric(score)
  cor.test(x,y, method="kendall", alternative="greater")
  
  # ===========================================================================
  
  # 2. Finding the KS statistics
  max(attr(perf,'y.values')[[1]]-attr(perf,'x.values')[[1]])
  
  # ===========================================================================
  
  # 3. Calculating the top 3 variables
  g<-predict(modelLR_New,
             type='terms',
             data)
  # a. Defining a function to find the top 3 variables based on the coefficients
  ftopk <- function(x,top=3){
    res=names(x)[order(x, decreasing = TRUE)][1:top]
    paste(res,collapse=";",sep="")
  }
  # b. Application of the function using the top 3 rows
  topk = apply(g,1,ftopk,top=3)
  #c. Add reason list to scored tets sample
  data1 <- cbind(data, topk)
  
  # ===========================================================================
  
  # 4. Hosmer Lemershow Test Goodness of Fit Test
  hoslem.test(goodbad, score, g = 10)
  
  # ===========================================================================
  
}