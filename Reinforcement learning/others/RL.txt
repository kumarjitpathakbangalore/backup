
import gym
import numpy as np
import random
import tensorflow as tf
import matplotlib.pyplot as plt
%matplotlib inline

#Loading the environment
env = gym.make('FrozenLake-v0')




#These lines establish the feed-forward part of the network used to choose actions
inputs1 = tf.placeholder(shape=[1,16],dtype=tf.float32)
W = tf.Variable(tf.random_uniform([16,4],0,0.01)) #Initializing weights with mean o and varian.... anything we mention here will be iupdated while tensorflow #back propogates
Qout = tf.matmul(inputs1,W) # matmul is matrix multiplication

# output will be 4 numbers representing the value for each action
# We are taking the max value action
predict = tf.argmax(Qout,1)

# variable are weights which will get tuned and placeholder is the frame whjere each batch will come for which the weights will beb trained and tuned


#Below we obtain the loss by taking the sum of squares difference between the target and prediction Q values.
nextQ = tf.placeholder(shape=[1,4],dtype=tf.float32)
loss = tf.reduce_sum(tf.square(nextQ - Qout)) # difference between the targetQ value and the actual Q values... we can define any loss function here


trainer = tf.train.GradientDescentOptimizer(learning_rate=0.1)# Tensorflow train GDO parameters for the training



updateModel = trainer.minimize(loss) # As above we have mentioned W as tf.variable so tensorflow treats these as the tuning factors which needs to be optimized #here in the example we have only weights to be updated.
Training the network
In [383]:
init = tf.initialize_all_variables()

# Set learning parameters
y = .99
e = 0.1
num_episodes = 2000
#create lists to contain total rewards and steps per episode
jList = []
rList = []
with tf.Session() as sess:
    sess.run(init)
    for i in range(num_episodes):
        #Reset environment and get first new observation
        s = env.reset()
        rAll = 0
        d = False
        j = 0
        #The Q-Network
        while j < 99:
            j+=1
            #Choose an action by greedily (with e chance of random action) from the Q-network
            a,allQ = sess.run([predict,Qout],feed_dict={inputs1:np.identity(16)[s:s+1]}) # Feed dict is providing the place holder with identity matrix 
			# Identity [s:s+1] is giving a list of list--- need to check how does it help
            if np.random.rand(1) < e: # roughly 10% of the times we are going to experiment
                a[0] = env.action_space.sample()
            # now we are getting an action either from the model or from random 10%
			#Get new state and reward from environment
            s1,r,d,_ = env.step(a[0])
            #Obtain the Q' values by feeding the new state through our network
            Q1 = sess.run(Qout,feed_dict={inputs1:np.identity(16)[s1:s1+1]})# Arrray of values for state s1 for all possible 4 actions
            #Obtain maxQ' and set our target value for chosen action.
            maxQ1 = np.max(Q1)
            targetQ = allQ # VVI allQ is list of the list and hence on the next step targetQ[0, a[0] this gives the place of the number.
            targetQ[0,a[0]] = r + y*maxQ1
            #Train our network using target and predicted Q values
            _,W1 = sess.run([updateModel,W],feed_dict={inputs1:np.identity(16)[s:s+1],nextQ:targetQ})# here target Q is assigned to next Q
			
            rAll += r
            s = s1
            if d == True:
                #Reduce chance of random action as we train the model.
                e = 1./((i/50) + 10)# as more and more algo is learning .. chance of random actions should be less
                break
        jList.append(j)# is the max no of steps taken on this loop
        rList.append(rAll)
print "Percent of succesful episodes: " + str(sum(rList)/num_episodes) + "%"
Percent of succesful episodes: 0.352%
Some statistics on network performance
We can see that the network beings to consistly reach the goal around the 750 episode mark.
In [384]:
plt.plot(rList)
Out[384]:
[<matplotlib.lines.Line2D at 0x11a81e610>]

It also begins to progress through the environment for longer than chance aroudn the 750 mark as well.
In [385]:
plt.plot(jList)